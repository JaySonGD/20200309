2019年年终总结

一转眼，2019年就过去了，对于2018的目标基本达成,想了很多总结的话语，觉得又不知道怎么来总结，不知道这一刻你是否也有同感，2019有很多经历，也有很多故事，对于2020年又有更多的期待！


对于我来说,是比较喜欢总结，在2019开始把研究的技术Demo放到Github，期间一共有编写108个demo，平均每个月有9个,常用组件有上传，下载，数据库，播放器，支付，内购，音视频编辑，DLNA/AipPlay协议，压缩加密方案，还有n多遍相关技术实践记录，在这一年里，个人的技术也得到了很大的的提升。对于解决工作上的问题也得到很大的帮助。


0.基本工作
2018一年过去了，平均1-2周就会有一次的需求，总体来说也不是很忙，但是我们不能盲目拿到需求就开始干，要把所有的流程理清楚，把数据构建好，最后来布局UI，要做到数据驱动界面，极大地提高工作的效率和减少Bug的生产，高效得地完成平常的工作需求

1.组件化
组件化这个东西其实并不复杂，他就是种思路，本质上是一种 app 架构思路，说穿了很简单的，难在组件化改造的时候，真正写起代码会出现不少棘手的问题。组件化是一种 app 架构，他的发展也是沿着正常的技术发展脉络来的，也是为了以追求高复用，高可维护性的目的的代码封装，区别是组件化是对整个 app 的再次封装。拆分工具组件与控件组件

2.自动化
了解shell的脚本,完成自动打包和上传，iOS在项目开发中少不了打包这一环节，打测试包也是操作比较频繁的，有时候因为一点点改动都需要另外提供新的安装包测试。而且xcode原生打包比较费时间，这时候就有了自动化打包，方便快捷自动化的同时，你还可以继续做其他事情。在过去的一年里JNS和捕车一共完成了66次的版本更新，保存估计节省20h, 其中打包仅仅只占了我们开发时间的1%都不到，如果整个团队或者公司都能有新的高效的工作方式，对于整个公司都有飞跃式的提升。



3.高效的框架与工具

AOP
KB
Sip




4.负责主持团队代码评审与自查


来年期盼：App架构搭建（组件化，模块解耦，中间路由）, 内存优化（耗电，网络优化,卡顿）, 视频与图像处理



